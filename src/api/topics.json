[
  {
    "name": "Angular",
    "subTopicList": [
      {
        "name": "Getting Started",
        "flashcards": [
          {
            "word": "Angular",
            "frequency": "daily",
            "definition": 
            "<ol><li>client-side framework (not ran on server)</li><li>Progressive Web Apps (PWAs): <ol><li>web app that can be installed on a device as a standalone</li><li>provide native app like experience (specifically designed for particular platform)</li><li>Offline Support</li></ol></li></ol>"
          },
          {
            "word": "native",
            "frequency": "daily",
            "definition": 
            "Pros:<ol><li>Better Performance</li><li>Tighter Integration</li><li>More features</li></ol> <br> Cons: <ol><li>Platform Lock in</li><li>Higher Development Costs</li><li>Limited cross platform compatibility</li></ol>"
          },
          {
            "word": "Typescript",
            "frequency": "daily",
            "definition": "-opens source language and superset of JS <br>-Transpiles (converts newer code to older)"
          },
          {
            "word": "npm",
            "frequency": "daily",
            "definition": "<ol><li>free, open source registry of JS packages (pre-written code modules)</li><li>CLI for interacting with repository/registry</li><ol>npm install -g @angular/cli<li>installs other package</li><li>generates node_modules (where node installs our packages)</li><li>-g stands for global, -g flag is not specific to Angular</li></ol></ol>"
          },
          {
            "word": "Decorator @()",
            "frequency": "daily",
            "definition": "-function that adds metadata to class"
          },
          {
            "word": "Directive",
            "frequency": "daily",
            "definition": "-a way to extend functionality of HTML elements <br>-can create custom elements, attributes, and classes <br><br> <span class=\"test\">Component Directive</span>  <br>-something that has a template <br><br> <span class=\"test\">Attribute Directive</span> <br>-ngClass, ngStyle <br>-add behavior to an existing element <br><br> <span class=\"test\">Structural Directive</span> <br>-ngIf, ngFor <br>-change the structure of DOM"
          },
          {
            "word": "Boostrap",
            "frequency": "daily",
            "definition": "<ol><li>self starting process that loads and goes</li><li>defines the starting component of app Ex. bootstrap: [AppComponent]</li><li>Typically in main.ts</li></ol>"
          },
          {
            "word": "Module @NgModule({})",
            "frequency": "daily",
            "definition": "-helps us organize our apps into blocks of functionality <br>-Components must be declared to only one Angular Module <br>-Declarations: can declare its own components, directives, and pipes <br>-Import: modules can import other modules, which means it can use their components, services <br>-Provides: can provide servies (instances of classes that provide some functionality) <br><br>-Types <br>-Root: top level and bootstrapped <br>-Feature: provides specific feature <br>-Shared: provides set of shared components, services and other entities"
          },
          {
            "word": "style.css",
            "frequency": "daily",
            "definition": "<ol><li>global style sheet</li><li>makes the style <font color=\"red\">This word is red</font> sheet available to all templates</li><li>npm install bootstrap font-awesome -> @import \"bootstrap/dist/css/bootstrap.min.css\"</li></ol>"
          },
          {
            "word": "Data Binding",
            "frequency": "daily",
            "definition": "<span class=\"test\">Interpolation</span> <br>-only string </br> -can use back ticks for expressions </br></br> <span class=\"test\">Property Binding</span> </br>-Allows other types other than string </br></br> <span class=\"test\">Two way binding [()]</span> </br>-way to bind a property of a component to a property of an element in the template"
          },
          {
            "word": "Pipes",
            "frequency": "daily",
            "definition": " "
          },
          {
            "word": "Lifecycle Hooks",
            "frequency": "daily",
            "definition": "OnInit: Perform component initialization, retrieve data <br> OnChanges: Perform action after change to input properties <br> OnDestroy:  Peform cleanup "
          },
          {
            "word": "Nested Components", 
            "frequency": "daily",
            "definition": "Stil needs to be declared in module <br> @Input <br> Parent HTML: [rating]='product.starRating' <br> Child Class: @Input() rating: number <br><br>  @Output event is the only way to pass event to pass parent <br> Child Class: <br> @Output() notify: EventEmitter<T> = new EventEmitter<>(); <br> onClick(){ this.notify.emit('clicked') } <br> Parent HTML: (notify)='onNotify($event)' "
          },
          {
            "word": "Service",
            "frequency": "daily",
            "definition": "-a class with focused purpose <br>-independent from components <br>-components can create an instance of a service but local and can't share data so instead register the service with Angular, then it creates a Singleton (single instance) <br><br> <span class=\"test\">Injector</span> <br>-maintains a container of created service instances <br>-define the service as a dependency <br><br> <span class=\"test\">Dependency Injection</span> -coding pattern in which a class receives the instances of object it needs (dependency) from an external source than creating itself <br><br> <span class=\"test\">Registering a Service</span> Root Injector <br>-service is available throught the application <br> @Injectable({ providedIn: 'root'}) <br>-then can access service from any component, no need for modules (old way) <br> @NgModule({ imports: [], declarations:[], bootstrap: [], prodviders: [ProdviderService]}) <br><br>  <span class=\"test\">Injecting a Service</span> <br>-constructor(private productService: ProductService) <br> -constructor is executed when an instance of class is created <br><br> <span class=\"test\">Tips</span> <br>-Clear Name <br> -PascalCasing <br>- Append 'Service' to the name <br>-export keyword <br>-Use Injectable "
          },
          {
            "word": "RxJS",
            "frequency": "daily",
            "definition": "-library for composing data using observable sequences <br> <span class=\"test\">Observable</span> -nothing until we subscribe (think of a streaming service) <br>-once subscribed, Observable emits 3 types of notifications next, error, and complete "
          },
          {
            "word": "Router",
            "frequency": "daily",
            "definition": "import like http module <br>-define a base element in index.html  {path: products/:id, component: ProductDetailComponent} -:id is a route parameter <br>-** denotes a wildcard path <br>-no leading slashes <br>-first match stragery so order matters <br>-Add to RouterModule.forRoot({}) in app.module.ts "
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": " "
          }
        ]
      },
      {
        "name": "Forms",
        "flashcards": [
          {
            "word": "States",
            "frequency": "daily",
            "definition": "Value Changed <br>-Pristine/Dirty <br><br> Validty <br>Valid/Errors <br><br> Visited <br>touched/untouched"
          },
          {
            "word": "Form Building Blocks",
            "frequency": "daily",
            "definition": "<span class=\"test\">FormControl</span> <br>-tracks value and state of individual input elements <br> <span class=\"test\">FormGroup</span> <br>-tracks a group of FormControl <br>-can be nested <br> <span class=\"test\">FormModel</span> <br>-data structure that represents HTML form, not to be confused with data model <br>-retains form state, value, controls"
          },
          {
            "word": "Template vs Reactive",
            "frequency": "daily",
            "definition": "<span class=\"topic\">Template</span> <br>-Angular generates Form model <br> <span class=\"topic\">Reactive</span> <br>-properties for data binding"
          },
          {
            "word": "Angular Form Directives",
            "frequency": "daily",
            "definition": "<span class=\"topic\">Template</span> <br>-import FormModule <br>-ngForm (form model), ngModel (two way binding and state), ngModelGroup (grouping elements within the form) <br>-Angular assigns ngForm directive to the form element inside template <br>-use TRV (#signUpForm=\"ngForm\") to access form model state information inside template <br><br> <span class=\"test\">Input</span> <br>-Angular creates formControl for [(ngModel)]=\"customer.firstName\" inside input element <br>-use the name=\"firstName\" as the key <br>-access state by TRV #firstNameVar=\"ngModel\". Ex: [ngClass]=\"{'is-invalid': firstNameVar.touched etc...  }\" <br><br> <span class=\"topic\">Reactive</span> <br>-import ReactiveFormsModule <br>-formGroup/Control/ControlName/GroupName <br>-doesn't use two way binding and TRV <br>-form element, [formGroup]=\"customerForm\" <br>-input element, formControlName=\"firstName\", no [] because we are binding to a string, not a property"
          },
          {
            "word": "Acccessing FormModel Properties",
            "frequency": "daily",
            "definition": "-customerForm.controls.firstName.valid <br>-customerForm.get('firstName').valid"
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": ""
          },
                    {
            "word": "",
            "frequency": "daily",
            "definition": ""
          },
          {
            "word": "Misc",
            "frequency": "daily",
            "definition": "AbstractControl <br>-base class for FormControl/Group <br>"
          }
        ]
      },
      {
        "name": "Angular Unit Testing",
        "flashcards": [
          {
            "word": "Types of Testing",
            "frequency": "daily",
            "definition": 
            "<span class=\"test\">Unit</span>  <br>-testing individual methods (are functions that are to a class) and  <br>-cheap, fast <br><br> <span class=\"test\">Integration</span>  <br>-how different modules or services work together <br><br> <span class=\"test\">Functional</span>  <br>-only verify the output of an action, do not check the intermediate states of the systems <br><br> <span class=\"test\">E2E</span>  <br>-replicate a user's behavior in a complete app environment <br>-expensive, fragile, and hard to maintain when automated (Cypress)"
          },
          {
              "word": "Mocking (& Types)",
              "frequency": "daily",
              "definition": 
              "-provides the ability to isolate and test code without interference of dependencies, network issues (don't want to make HTTP calls) <br> <span class=\"test\">Dummies</span> <br>-Objects passed around but not used. Mostly for parameter slot <br><br><span class=\"test\">Fakes</span> <br>-actual implementation but short one (won't work in production) <br>-in memory database instead of real db <br><br> <span class=\"test\">Stubs</span> <br>-object provides canned answers <br><br> <span class=\"test\">Spies</span> <br>-object that records what methods and what parameters were called with <br>-Most mocking libraries has object that is a mix between stub and spy <br><br> <span class=\"test\">Mocks</span> <br>-objects with pre-programmed with expectations (hardest to test) <br>-object lets you tell it exactly what calls you expect to have against it then tells you whether or not those calls happened"
          },
          {
              "word": "Jasmine + Karma vs Jest ",
              "frequency": "daily",
              "definition": 
              "<span class=\"topic\">Jasmine</span> <br>-testing framework in Node.js <br>-provides funtions like (describe, it, expect) <br><br> <span class=\"topic\">Karma</span> <br>-to run a web app you need HTML file and a browser (Chrome, headless Chrome aka without GUI) <br>-helps run test on every code change in a live browser <br><br> <span class=\"topic\">Jest</span> <br>-same functions but key difference is jest works without a browser because it uses jsdom library to emulate all DOM interactions in Node.js <br>-multithreading (karma is getting some) aka can run each test file in parallel <br>-by default number of threads is equal to CPU cores but can adjust"
          },
          {
              "word": "Types of Unit Tests in Angular",
              "frequency": "daily",
              "definition": 
              "<span class=\"test\">Isolated</span> <br>-single piece, construct by using new keyword (new HeroComponent, I think)<br> <span class=\"test\">Integration</span> <br>-uses testbed <br>-don't always have to test the template in your test <br><span class=\"test\">Shallow</span>: single component <br><span class=\"test\">Deep</span>: test children of component"
          },
          {
              "word": "DAMP vs DRY",
              "frequency": "daily",
              "definition": 
              "<span class=\"test\">Descriptive and Meaningful Phrases</span> <br>-repeat yourself if necessary"
          },
          {
              "word": "Testing Pipes/Services",
              "frequency": "daily",
              "definition": 
              "-Just currently use let x = new MessageService(), check later"
          },
          {
              "word": "jasmine.createSpyObj",
              "frequency": "daily",
              "definition": 
              "<img class=\"images\" src=\"../assets/images/angular-unit-testing/3.5.png\"> <br>26: -creates a mock object we can control <br>-can tell what methods, what to return, and what methods were called <br>34-problem deleteHero was returning an observable <br>-since we are just subscribing to the result (dont care about data), just return any observable"
          },
          {
              "word": "Testbed",
              "frequency": "daily",
              "definition": 
              "<img class=\"images\" src=\"../assets/images/angular-unit-testing/4.3.png\"> <br> 55-allows us to test component with its template <br><br> Testing Module <br>51-like recreating a tiny version of your app just for testing <br>-Use when for Angular specific (component, services with DI) <br>-Don't use when classes with no dependencies or testing pure functions (helpers, simple utility methods)"
          },
          {
              "word": "Fixture",
              "frequency": "daily",
              "definition": 
              "-wrapper for a component like mwnw <br>-ComponentFixture: object that represents a component and its DOM <br>-fixture.ComponentInstance //contains the component itself <br>-fixture.detectChanges() causes the lifecycle events to run, can call ngOnInit but we want Angular to handle these things? <br>-remember the span tag caused an error because hero was null, need detectChanges"
          },
          {
              "word": "NO_ERRORS_SCHEMA",
              "frequency": "daily",
              "definition": 
              "-Tells Angular don't try to validate the template for component or schema <br>-set in Testbed module in schemas: []"
          },
          {
              "word": "nativeElement",
              "frequency": "daily",
              "definition": 
              "-gets a handle to DOM element <br>-exposes the regular old browser's DOM API"
          },
          {
              "word": "debugElement",
              "frequency": "daily",
              "definition": 
              "-a wrapper around the actual DOM Node (similar to fixture) that has different set of function that is similar to nE <br>-can access router link directive, also know which component it belongs to <br> <br> Compare to nE: <br>-fixture.debugElement.query(By.css('a')).nativeElement.textContent vs fixture.nativeElement.querySelector('a').textContent"
          },
          {
              "word": "Mocking Injected Service",
              "frequency": "daily",
              "definition": 
              "<img class=\"images\" src=\"../assets/images/angular-unit-testing/4.8.png\"> <br>-don't want to make real HTTP calls and don't want to test two units at the same time <br>-uses long handed way in module providers: [ { provide: HeroService, useValue: mockHeroService}]"
          },
          {
              "word": "fixture.detectChanges()",
              "frequency": "daily",
              "definition": 
              "<img class=\"images\" src=\"../assets/images/angular-unit-testing/4.8.2.png\"> <br>-TestBed.createComponent(), at this point the component instance exists but Angular hasn't  run change detection yet, meaning the template hasn't been rendered, bindings aren't resolved, lifecycle hooks like ngOnInit haven't been called <br>-fixture.detectChanges() triggers Angular's change detection cycle manually <br><br>3 scenarios when you dont need it <br>-testing component class or pure function, manually setting up state, testing with fakeAsync and tick <br>Old <br>-In Angular, changeDetection causes lifecycles events to run <br>-orginally did component.ngOnInit(); but thise doesn't follow integration tests. We want Angular to handle these things"
          },
          {
              "word": "Finding Elements by Device",
              "frequency": "daily",
              "definition": 
              ""
          },
          {
              "word": "Setting Up Integration Testing of Services and HTTP mock and methods",
              "frequency": "daily",
              "definition": 
              "<img class=\"images\" src=\"../assets/images/angular-unit-testing/5.6.png\"> <br>-Services doesn't have HTML but mostly have HTTP (Angular has a special HTTP mock service) <br>-import HttpClientTestingModule and inject HttpTestingController from @angular/common/http/testing <br><br> <span class=\"topic\">Two Ways on Injecting</span> <br>1: httpTestingController = Testbed.inject(HttpTestingController); <br>2: use inject( [HeroService], (service:HeroService) => { }) <br><br> <span class=\"topic\">httpTestingController</span> <br> <span class=\"test\">const req = hTC.expectOne(URL: string, descrption?: string)</span> <br>-pass in URL we expect but doesn't send any results back <br> <span class=\"test\">req.flush({id: 4, name: 'Superman'})</span> <br>-decide what data to send back <br> <span class=\"test\">hTC.verify();</span> <br>-verifies only requests we expected (extra calls would fail test)"
          },
          {
              "word": "Triggering Events on Elements",
              "frequency": "daily",
              "definition": 
              "-Component is a subclass of a directive so we can grab child components with <span class=\"code\">const heroComponents = fixture.debugElement.queryAll(By.directive(HeroComponent));</span> <br>How to handle $event.stopPropagation <br> <span class=\"code\">heroComponents[0].query(By.css('button')).triggerEventHandler('click', {stopPropagation: () => {}});</span> <br> OR <br> <span class=\"code\">(<HeroComponent>heroComponent[0].componentInstance).delete.emit(undefined)</span> <br>-don't need to emit a value because there was no value <br> OR <br> <span class=\"code\">heroComponents[0].triggerEventHandler('delete', null);</span> <br>-Neither is better but subjective. Do you want to worry about the bindings between child and parent or you might not have to worry about child component is working correctly <br><br> Method 1: <br> spyOn(fixture.componentInstance, 'delete') <br> expect(fixture.componentInstance.delete).toHaveBeenCalledWith(HEROES[0]); <br><br> My method: <br> expect(mockHeroService.deleteHero).toHaveBeenCalledWith(HEROES[0)"
          },
          {
              "word": "Testing DOM Interaction WIP",
              "frequency": "daily",
              "definition": 
              ""
          },
          {
              "word": "Testing DOM Interaction WIP",
              "frequency": "daily",
              "definition": 
              ""
          },
          {
              "word": "Testing DOM Interaction WIP",
              "frequency": "daily",
              "definition": 
              ""
          },
          {
              "word": "Angular Unit Testing Misc",
              "frequency": "daily",
              "definition": 
              "<span class=\"topic\">Interaction/State</span> <br>-state is where you check the state of the component <br>-interaction is where it was called with the correct parameter, going to check if a certain interaction happened between the class we are testing and some collaborator class <br><br> <span class=\"topic\">ngOnInit</span> <br>-we would have to manually call it ourselves because Angular framework is not running therefore is not automatically initializing the component"
          }
        ]
      }
    ]
  },
  {
    "name": "Async",
    "subTopicList": [
      {
        "name": "Async",
        "flashcards" : [
          {
            "word": "Synchronous vs Asynchronous",
            "frequency": "daily",
            "definition": 
            "Synchronous <br>-tasks run in blocking order (waits until it is completed) <br><br> Asynchronous <br>-tasks run independently without blocking <br>-program keeps going while some tasks wait in the background <br>-useful for API, I/O, timers <br><br> JavaScript <br>-synchronous by default (single threaded model meaning one task a time in main thread) <br>-but uses event loop + browser APIs to handle asynchronous tasks using callingback, promises, async/await and web APIs <br><br> How It Works (ChatGPT) <br>1.JS runs sync <br>2. hits async code, offloads that task to a WEB API <br>3. when tasks finishes, it's added to event queue <br>4. Event loop checks the queue and runs callbacks when main thread is free"
          },
          {
            "word": "Callbacks",
            "frequency": "daily",
            "definition": 
            "-a function that is passed as an arguement inside another function"
          },
          {
            "word": "Promises",
            "frequency": "daily",
            "definition": 
            "-an object that represents the eventual completion/failure of an asynchronous operation, and its resulting value <br>-not lazy, eagerly evaluated <br>-once resolved, it will not create a new Promise (setInterval example)" 
          },
          {
            "word": "Chaining, Catching Errors, Last Operation in Promises",
            "frequency": "daily",
            "definition": 
            "<img class=\"images\" src=\"../assets/images/async/3.4-5.png\"> <br>-then() will return a promise <br>-typically one catch is enough but if you wanted more control <br>-if you threw a new Error, it will go to next catch() <br>-want to execute after a promise settles but don't care if successful or not (like removing a loading indicator"
          },
          {
            "word": "Promise.all/allSettled and race",
            "frequency": "daily",
            "definition": 
            "<img class=\"images\" src=\"../assets/images/async/4.4.png\"> <br>all <br>-when several function are independent of each other but need all of them to continue <br>-want to batch all of my calls and fire at once. the power of async <br><br> <img class=\"images\" src=\"../assets/images/async/4.5.png\"> <br>allSettled <br>-useful when if you dont care if some calls fail <br>-will wait until all promises settle (fulfilled or rejected) <br>-{ status: \"fulfilled\", value: {} } OR { status: \"rejected\", reason: {} }<br>-doesn't have a catch but still recommended <br><br> <img class=\"images\" src=\"../assets/images/async/4.6.png\"> <br>race <br>-will wait until first promise is settled <br>-rarely used"
          },
          {
            "word": "Async/Await",
            "frequency": "daily",
            "definition": 
            "-syntactic sugar for promises <br>-helps write promises in synchronous format <br><br> <span class=\"topic\">Async</span> <br>-async functions will return an implicit promise <br><br><span class=\"topic\">await</span> <br>-pauses the execution of an async function while it waits for the promose to be fulfilled <br>-blocks the current function but does not block calling functions"
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": 
            "<br><img class=\"images\" src=\"../assets/images/async/5.6.png\"><br>"
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": 
            ""
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": 
            ""
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": 
            ""
          },
          {
            "word": "",
            "frequency": "daily",
            "definition": 
            ""
          }
        ]
      }
    ]
  },
  {
    "name": "Springboot",
    "subTopicList": [
      {
        "name": "MVC Controller"
      }
    ]
  },
  {
    "name": "Java",
    "subTopicList": [
      {
        "name": "Maven",
        "flashcards": [
          {
            "word": "Maven",
            "frequency": "daily",
            "definition": "-tool to build source code (java, kotlin) <br> -produce an artifact (jar/zip file) <br> -uses pom.xml "
          },
          {
            "word": "Installation",
            "frequency": "daily",
            "definition": "-If not using a package manager, set the enviromnent variable <br> -Env Variable for your system -> Edit Path -> New -> Paste Path to bin -> mvn -v"
          },
          {
            "word": "maven wrapper",
            "frequency": "daily",
            "definition": "-allows you to run maven without having maven installed BUT must have maven to install the wrapper <br> -mvn:wrapper wrapper (to install wrapper) <br>-./mwnw to use the command? <br> -mvnw.cmd (windows) & mvnw (linux/macOS) "
          },
          {
            "word": "groupId, artifactId, version",
            "frequency": "daily",
            "definition": "groupdId and artifactId are used to uniquely identify your project <br> groupdId <br> -takes the reverse of the domain name (package name) <br> artifactId <br> -projectId <br> versions <br> -SNAPSHOT means WIP (not a release version) <br>-RC "
          },
          {
            "word": "maven properties",
            "frequency": "daily",
            "definition": "specify the version here"
          },
          {
            "word": "plugins",
            "frequency": "daily",
            "definition": "-can be used for quality checking or to deploy your code?"
          },
          {
            "word": "dependencies (scope)",
            "frequency": "daily",
            "definition": "scope <br> -define the visibility and lifecycle of a dependency <br>-determines when the dependency is included in build process. Compilation, Packaging (JAR), Runtime <br> compile <br>-default <br>-means project needs this dependency for compile, test, deploy/runtime? <br> provided <br>-artifact is provided through all build cycle expect packaging <br>-good idea to not iclude if it will provided by container/environment <br> Runtime <br>-included in  runtime, packaging (opposite of provided) <br> test <br>-only available in the test classpath <br>-not included in runtime or compile classpath <br> system <br>-not recommended <br>-explicitly provided the JAR file on your system (defeats the purpose of Maven) <br>-only be used when not avilable in Maven repo <br>-compilation, runtime but not in package"
          },
          {
            "word": "mvn commands",
            "frequency": "daily",
            "definition": "clean <br>-deletes target folder <br> compile <br>-compiles the src/main in target/classes <br> test <br>-runs mvn compile (the code must compile before running tests)then runs src/tests <br> package <br>-compiles, tests (-DskipTests) <br>-packages your code into a jar inside target (so other people can use it) <br> install <br>-includes package installs jar file into m2 (local maven repository)"
          },
          {
            "word": "maven repository",
            "frequency": "daily",
            "definition": "-location that stores build artifacts (JAR, plugins, dependencies) <br>-looks for pom.xml when you build project with Maven <br><br>Steps <br> 1. Maven checks your local repo (~/.m2/repository) <br> 2. If not present then central or remote/private (company-hosted repos) like Nexus, Artifcatory <br>-when maven tries to download dependency it tries to ask the remotes (global repo) and the downloads it into m2 so it can be reused (cached aka no re-download)"
          },
          {
            "word": "parent pom aka (BOM)",
            "frequency": "daily",
            "definition": "-packaging is of type pom <br>-"
          },
          {
            "word": "Misc",
            "frequency": "daily",
            "definition": "mvn validate <br> -validates the project <br> packaging <br> -how we distribute our application (jar, war, ...) <br> src/main/resources <br>-find your application properties"
          }
        ]
      }
    ]
  },
  {
    "name": "Money",
    "subTopicList": [
      {
        "name": "Investing",
        "flashcards": [
          {
            "word": "Fund",
            "frequency": "daily",
            "definition": 
            "-group of people pool their money to buy assets (stock, bond, real estate)"
          },
                    {
            "word": "Index Funds",
            "frequency": "daily",
            "definition": 
            "-passively managed(follows a index) <br>-copies a list (aka index/scorecard) of compaines <br>-doesn't try to pick winning stocks <br>-small fees (0.02-0.20% -> make $1000 Fees: 0.20cents-$2) <br>-Vanguard, Blackrock, Fidelity -<br>low risk (money is spread out between companies) <br>-priced once after market closes (NAV = (Total Assets-Expenses)/shares) "
          },
                    {
            "word": "Mutual Funds",
            "frequency": "daily",
            "definition": 
            "-actively managed (professional team tries to beat the market) <br>-Higher Fees (Common Expense ratio: 0.5-1.5% <br>-hard time beating market but believed in them or want assets not available in index <br>-Vanguard, Fidelity, JP Morgan (offers a wiide range of funds (passively and actively) <br>-Has a CUT OFF time like index"
          },
                    {
            "word": "Hedge Funds",
            "frequency": "daily",
            "definition": 
            "-name comes from hedging risks <br>-aggresive and complex strategy (short selling, leverage, dirvatives) <br>-must be a accredited investor <br>-private investment funds that pool money from weahlthy -2 and 20 model (2% percentage managment fees, 20% on proficts)"
          },
                    {
            "word": "ETFs",
            "frequency": "daily",
            "definition": 
            "exchange traded funds <br>-mix between index funds and stocks <br>-Low feeds (0.03-0.75%) <br>-passively managed (usually trackin index)"
          }
        ]
      },
      {
        "name": "Retirement",
        "flashcards": []
      }
    ]
  },
  {
    "name": "Typescript",
    "subTopicList": [
      {
        "name": "Typescript 5 Fundamentals",
        "flashcards": [
          {
            "word": "Typescript Commands",
            "frequency": "daily",
            "definition": "tsc --outDir js --watch app.ts <br>-refers to a directory where the output of program is, compiler will watch for file changes <br><br> tsc --init <br>-creates a tsconfig.json <br><br>TypeScript Project Configuration <br> <img class=\"images\" src=\"../assets/images/typescript/2-4.png\">"
          },
          {
            "word": "Typescript Parameters",
            "frequency": "daily",
            "definition": "<span class=\"test\">Optional Parameters</span> <br>-denoted with ? (title?: string) <br>-must apppear after required parameters <br>-will return undefined if not present (not null) <br><br><span class=\"test\">Default</span> <br>-treated as optional if they appear after all parameter <br>-don't have to add ? <br><br> <span class=\"test\">Rest</span> <br>...title: string[] <br>-think of it as rest of the parameters <br>-must be last and always captured in an array"
          },
          {
            "word": "Typescript Function Overloads",
            "frequency": "daily",
            "definition": "-TS compiles to JS which doesn't have type annotations (removed at compile time) <br>-Therefore, you provide multiple function signatures but ony provide one implementation"
          },
          {
            "word": "Typescript Classes",
            "frequency": "daily",
            "definition": "-can only create one constructor so use optional parameters to call different ways <br>-can declare public/private variables inside constructor constructor(public name: string)" 
          },
          {
            "word": "Typescript and Java Access Modifiers",
            "frequency": "daily",
            "definition": "TS <br>-public (default) <br>-protected: inside class and subclasses <br>-private: only class <br>-doesn't have packages instead it has modules (files) <br>-control visiblity by export/import, not access modifies <br><br> Java <br>-public: anywhere <br>-protected: same package and subclasses <br>-package-private: same package (default) <br>-private: same class"
          },
          {
            "word": "Typescript Modules",
            "frequency": "daily",
            "definition": "-instead of packages, TS have modules (files) <br>-export default class Person <br>-If no { } then it would import default and can name it anything Ex. import Teacher from \"./person\" <br>-named exports must use { } <br>-can also use alias for exports and imports <br><br> <span class=\"topic\">Relative vs Non relative</span> <br>-relative (/, ./, ../) for own modules and non-relative for 3rd party modules (import * as _ from 'lodash')"
          },
          {
            "word": "TypeScript Promises",
            "frequency": "daily",
            "definition": "<img class=\"images\" src=\"../assets/images/typescript/8.3.png\"> <br>Line 28: You can another parameter and it will act as a reject, therefore catch funtion will no longer be called"
          },
          {
            "word": "Try/Catch with Async/Await (Typescript Fundamentals)",
            "frequency": "daily",
            "definition": "-You can do it try/catch inside async but cleaner code but be on the async function itself logSearchResults('asd').catch(reason => console.error(reason))"
          },
          {
            "word": "Generics",
            "frequency": "daily",
            "definition": "-lets you create resuable, flexible code by writing functions, classes, or types that works with any type while preserving type safety <br><br>class Attack<T extends Monster> <br>-apply constraint, T must be a subclass of Monster <br><br> <img class=\"images\" src=\"../assets/images/typescript/gpt.png\">"
          },
          {
            "word": "Typescript Type Declaration Files",
            "frequency": "daily",
            "definition": "-Typescript wrapper for JS libraries, tells TS the shape of code with actual implementation <br>-provides autocompletion (because it gives it the types) + error checking <br>-filename end with d.ts <br>npm install lodash && npm install @types/lodash"
          },
          {
            "word": "Typescript Decorator",
            "frequency": "daily",
            "definition": "-function that is applied to other code (@Logger)"
          },
          {
            "word": "Typescript Source Maps",
            "frequency": "daily",
            "definition": "-tsc maps your TS code to JS (*.js.map) <br>sourceMap=true in tsconfig.json <br>-allows you to debug in .ts files <br>-start 'Javascript Debug Terminal' + run node app.js <br>-ng service builds .map by default (development mode) <br>-can check by looking at Sources tab and you ts file instead of js files, but ng build --prod(not on by default) <br><br>-remember to use watch"
          },
          {
            "word": "Typescript Misc",
            "frequency": "daily",
            "definition": "-JS moves all variables declarations to top <br>Annotation <br>- add notes giving explanation or comment (name: string) <br> Inferences <br>-guess it for you <br>Never <br>-type that will never occur (a function that will never return like infinite loop, throws error) <br>JS: all functions parameters are optional, TS are all required <br>Arrow Functions (aka lambda) => (fat arrow + greater than) <br>Function Types: let releaseFunc: (some:number) => string <br>"
          }
        ]
      }
    ]
  }
]